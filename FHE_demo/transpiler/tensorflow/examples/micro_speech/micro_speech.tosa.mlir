module attributes {tf_saved_model.semantics, tfl.description = "MLIR Converted.", tfl.schema_version = 3 : i32} {
  func.func @main(%arg0: tensor<1x32x33x1xui8> {tf_saved_model.index_path = ["input_2"]}) -> (tensor<1x4xui8> {tf_saved_model.index_path = ["dense_1"]}) attributes {tf.entry_function = {inputs = "serving_default_input_2:0", outputs = "StatefulPartitionedCall:0"}, tf_saved_model.exported_names = ["serving_default"]} {
    %0 = "tosa.const"() <{value = dense<[28, -83, -55, 110]> : tensor<4xi32>}> : () -> tensor<4xi32>
    %1 = "tosa.const"() <{value = dense<"0x0BF8FF03130F03FB07FA0018060C010E061BEAFBFC09FE08F82B13F6251B0B0309FBFB111011F60330F909232606050EC5030B03F40AED22DA22E8F0FE0CFDEDFC0F00FEF901F4F6F600ED061D05F6F818E3F02C2E1C10FEF5FB1DEBFB07E809E103EAFA13F3F910EEF2F3F0050C0BFA0514D4E3F8DA070602F2E5190DE82322D710F9F0E114E9F1EC1614200115ED1E0EC009EE1BF81BFB0ED7E7EFF5EB0405DAFED9E91CDF08291318000CC90113CCF0100009EA02F1FBF8FCF4F5F412F4FAFF1C05FFF806ECF5B10BBCE319F50BF344030E13F2061ABB09FFF908EB0CFEF90DCDFA00F7D4170EF1E6B8FBE8E6F40AD808F3CAFB0AE2E5520627FFF4050DAF3110FD0107FF3E0144D2DAF20FC53C28FEE4BCC8E5E31106E11517FEE02CB2DB5ACC070A05EE100A33CADAEE07A539272BA3BFBE03813B18031FC8CBFFF503EE04E835DFE8EEEA0BEA130D262024F02C0AC3B8DDEBED0D1403F7E5FCF2E60C000716E7FAFDFFFBF316FF21E0D1EACA1FB625160D1C01D92B34CFF5F9E4E5222012BCF6D2EDE91314F1FDCFE100FCF6FC14F51AD4E7F4EE05DB2023EF29FBE821000FF9F002EA050331D3F4DB1E101D310D13DDECE5F20EFDFB0329E0E1F2002FE81817DF06E9F924FBF70619ECF9F20C11E405F9F9E5210B13F105010B18F501FD0DD42118091BF70EF4D3CDF2FC25FCFD0F0D2F042CFB190BF4E8EA26E4192C12FDD4FB0EF90F0C14F7FF212906160CF50BD6B2CBE740E9F5120E18FC0CE0FDD43D43180621E506F31B4F233112F60F10E004080C021E021A13F1BCDCF937E1ECFFF8F2070BB4E7A51D24F0FB4699C4062C3B461D2504EFF7F0FDFE16E7351D1BF8EBD20DFC30070AFD0013031FE2FDC25802F3C564DFD91FEE1A29253EF01F"> : tensor<4x160xi8>}> : () -> tensor<4x160xi8>
    %2 = "tosa.const"() <{value = dense<[196, 8, -4, 107, 160, -22, 280, 119]> : tensor<8xi32>}> : () -> tensor<8xi32>
    %3 = "tosa.const"() <{value = dense<"0xtensor<8x10x8x1xi8>}> : () -> tensor<8x10x8x1xi8>
    %4 = "tosa.rescale"(%arg0) <{double_round = false, input_zp = 0 : i32, multiplier = array<i32: 1073741824>, output_zp = -128 : i32, per_channel = false, scale32 = true, shift = array<i32: 30>}> : (tensor<1x32x33x1xui8>) -> tensor<1x32x33x1xi8>
    %5 = "tosa.rescale"(%4) <{double_round = true, input_zp = -128 : i32, multiplier = array<i32: 1073741824>, output_zp = -128 : i32, per_channel = false, scale32 = true, shift = array<i32: 30>}> : (tensor<1x32x33x1xi8>) -> tensor<1x32x33x1xi8>
    %6 = "tosa.conv2d"(%5, %3, %2) <{dilation = array<i64: 1, 1>, pad = array<i64: 1, 1, 3, 4>, quantization_info = #tosa.conv_quant<input_zp = -128, weight_zp = 0>, stride = array<i64: 8, 8>}> : (tensor<1x32x33x1xi8>, tensor<8x10x8x1xi8>, tensor<8xi32>) -> tensor<1x4x5x8xi32>
    %7 = "tosa.rescale"(%6) <{double_round = true, input_zp = 0 : i32, multiplier = array<i32: 1453353092, 1578547973, 1344178407, 1975764937, 1637998335, 1472659272, 1962002768, 1326896167>, output_zp = -128 : i32, per_channel = true, scale32 = true, shift = array<i32: 37, 38, 37, 38, 38, 38, 38, 37>}> : (tensor<1x4x5x8xi32>) -> tensor<1x4x5x8xi8>
    %8 = "tosa.clamp"(%7) <{max_fp = 0.000000e+00 : f32, max_int = 127 : i64, min_fp = 0.000000e+00 : f32, min_int = -128 : i64}> : (tensor<1x4x5x8xi8>) -> tensor<1x4x5x8xi8>
    %9 = "tosa.reshape"(%8) <{new_shape = array<i64: -9223372036854775808, 160>}> : (tensor<1x4x5x8xi8>) -> tensor<1x160xi8>
    %10 = "tosa.fully_connected"(%9, %1, %0) <{quantization_info = #tosa.conv_quant<input_zp = -128, weight_zp = 0>}> : (tensor<1x160xi8>, tensor<4x160xi8>, tensor<4xi32>) -> tensor<1x4xi32>
    %11 = "tosa.rescale"(%10) <{double_round = true, input_zp = 0 : i32, multiplier = array<i32: 1909959842>, output_zp = -1 : i32, per_channel = false, scale32 = true, shift = array<i32: 39>}> : (tensor<1x4xi32>) -> tensor<1x4xi8>
    %12 = "tosa.rescale"(%11) <{double_round = true, input_zp = -1 : i32, multiplier = array<i32: 1073741824>, output_zp = -1 : i32, per_channel = false, scale32 = true, shift = array<i32: 30>}> : (tensor<1x4xi8>) -> tensor<1x4xi8>
    %13 = "tosa.rescale"(%12) <{double_round = false, input_zp = -1 : i32, multiplier = array<i32: 1073741824>, output_zp = 127 : i32, per_channel = false, scale32 = true, shift = array<i32: 30>}> : (tensor<1x4xi8>) -> tensor<1x4xui8>
    return %13 : tensor<1x4xui8>
  }
}
