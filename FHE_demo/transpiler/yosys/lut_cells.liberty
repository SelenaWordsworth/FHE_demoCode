/*
 * A cell library for generic look-up tables.
 *
 * This is needed for two reasons:
 *
 *  1. To support parsing in the XLS netlist parser, which can only parse cell
 *  evaluations and basic assignment statements (not, e.g., a bit shift which
 *  is yosys's default method for implementing a lookup table)
 *
 *  2. To ensure the LUT implementation is a valid liberty file, in which every
 *  input pin is bound to a single bit value. This is why we must enumerate the
 *  entire truth table.
 */

library(supergate) {
  delay_model    : table_lookup;
  time_unit      : "1ns";

  cell(lut1) {
    area : 100;
    pin(A) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(A' P0) | (A P1)";
      timing() {
        related_pin : "A";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

  cell(lut2) {
    area : 100;
    pin(A) { direction : input; }
    pin(B) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(P2) { direction : input; }
    pin(P3) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(B' A' P0) | (B' A P1) | (B A' P2) | (B A P3)";
      timing() {
        related_pin : "A B";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

  cell(lut3) {
    area : 100;
    pin(A) { direction : input; }
    pin(B) { direction : input; }
    pin(C) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(P2) { direction : input; }
    pin(P3) { direction : input; }
    pin(P4) { direction : input; }
    pin(P5) { direction : input; }
    pin(P6) { direction : input; }
    pin(P7) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(C' B' A' P0) | (C' B' A P1) | (C' B A' P2) | (C' B A P3) | (C B' A' P4) | (C B' A P5) | (C B A' P6) | (C B A P7)";
      timing() {
        related_pin : "A B C";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

  cell(lut4) {
    area : 100;
    pin(A) { direction : input; }
    pin(B) { direction : input; }
    pin(C) { direction : input; }
    pin(D) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(P2) { direction : input; }
    pin(P3) { direction : input; }
    pin(P4) { direction : input; }
    pin(P5) { direction : input; }
    pin(P6) { direction : input; }
    pin(P7) { direction : input; }
    pin(P8) { direction : input; }
    pin(P9) { direction : input; }
    pin(P10) { direction : input; }
    pin(P11) { direction : input; }
    pin(P12) { direction : input; }
    pin(P13) { direction : input; }
    pin(P14) { direction : input; }
    pin(P15) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(D' C' B' A' P0) | (D' C' B' A P1) | (D' C' B A' P2) | (D' C' B A P3) | (D' C B' A' P4) | (D' C B' A P5) | (D' C B A' P6) | (D' C B A P7) | (D C' B' A' P8) | (D C' B' A P9) | (D C' B A' P10) | (D C' B A P11) | (D C B' A' P12) | (D C B' A P13) | (D C B A' P14) | (D C B A P15)";
      timing() {
        related_pin : "A B C D";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

  cell(lut5) {
    area : 100;
    pin(A) { direction : input; }
    pin(B) { direction : input; }
    pin(C) { direction : input; }
    pin(D) { direction : input; }
    pin(E) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(P2) { direction : input; }
    pin(P3) { direction : input; }
    pin(P4) { direction : input; }
    pin(P5) { direction : input; }
    pin(P6) { direction : input; }
    pin(P7) { direction : input; }
    pin(P8) { direction : input; }
    pin(P9) { direction : input; }
    pin(P10) { direction : input; }
    pin(P11) { direction : input; }
    pin(P12) { direction : input; }
    pin(P13) { direction : input; }
    pin(P14) { direction : input; }
    pin(P15) { direction : input; }
    pin(P16) { direction : input; }
    pin(P17) { direction : input; }
    pin(P18) { direction : input; }
    pin(P19) { direction : input; }
    pin(P20) { direction : input; }
    pin(P21) { direction : input; }
    pin(P22) { direction : input; }
    pin(P23) { direction : input; }
    pin(P24) { direction : input; }
    pin(P25) { direction : input; }
    pin(P26) { direction : input; }
    pin(P27) { direction : input; }
    pin(P28) { direction : input; }
    pin(P29) { direction : input; }
    pin(P30) { direction : input; }
    pin(P31) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(E' D' C' B' A' P0) | (E' D' C' B' A P1) | (E' D' C' B A' P2) | (E' D' C' B A P3) | (E' D' C B' A' P4) | (E' D' C B' A P5) | (E' D' C B A' P6) | (E' D' C B A P7) | (E' D C' B' A' P8) | (E' D C' B' A P9) | (E' D C' B A' P10) | (E' D C' B A P11) | (E' D C B' A' P12) | (E' D C B' A P13) | (E' D C B A' P14) | (E' D C B A P15) | (E D' C' B' A' P16) | (E D' C' B' A P17) | (E D' C' B A' P18) | (E D' C' B A P19) | (E D' C B' A' P20) | (E D' C B' A P21) | (E D' C B A' P22) | (E D' C B A P23) | (E D C' B' A' P24) | (E D C' B' A P25) | (E D C' B A' P26) | (E D C' B A P27) | (E D C B' A' P28) | (E D C B' A P29) | (E D C B A' P30) | (E D C B A P31)";
      timing() {
        related_pin : "A B C D E";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

  cell(lut6) {
    area : 100;
    pin(A) { direction : input; }
    pin(B) { direction : input; }
    pin(C) { direction : input; }
    pin(D) { direction : input; }
    pin(E) { direction : input; }
    pin(F) { direction : input; }
    pin(P0) { direction : input; }
    pin(P1) { direction : input; }
    pin(P2) { direction : input; }
    pin(P3) { direction : input; }
    pin(P4) { direction : input; }
    pin(P5) { direction : input; }
    pin(P6) { direction : input; }
    pin(P7) { direction : input; }
    pin(P8) { direction : input; }
    pin(P9) { direction : input; }
    pin(P10) { direction : input; }
    pin(P11) { direction : input; }
    pin(P12) { direction : input; }
    pin(P13) { direction : input; }
    pin(P14) { direction : input; }
    pin(P15) { direction : input; }
    pin(P16) { direction : input; }
    pin(P17) { direction : input; }
    pin(P18) { direction : input; }
    pin(P19) { direction : input; }
    pin(P20) { direction : input; }
    pin(P21) { direction : input; }
    pin(P22) { direction : input; }
    pin(P23) { direction : input; }
    pin(P24) { direction : input; }
    pin(P25) { direction : input; }
    pin(P26) { direction : input; }
    pin(P27) { direction : input; }
    pin(P28) { direction : input; }
    pin(P29) { direction : input; }
    pin(P30) { direction : input; }
    pin(P31) { direction : input; }
    pin(P32) { direction : input; }
    pin(P33) { direction : input; }
    pin(P34) { direction : input; }
    pin(P35) { direction : input; }
    pin(P36) { direction : input; }
    pin(P37) { direction : input; }
    pin(P38) { direction : input; }
    pin(P39) { direction : input; }
    pin(P40) { direction : input; }
    pin(P41) { direction : input; }
    pin(P42) { direction : input; }
    pin(P43) { direction : input; }
    pin(P44) { direction : input; }
    pin(P45) { direction : input; }
    pin(P46) { direction : input; }
    pin(P47) { direction : input; }
    pin(P48) { direction : input; }
    pin(P49) { direction : input; }
    pin(P50) { direction : input; }
    pin(P51) { direction : input; }
    pin(P52) { direction : input; }
    pin(P53) { direction : input; }
    pin(P54) { direction : input; }
    pin(P55) { direction : input; }
    pin(P56) { direction : input; }
    pin(P57) { direction : input; }
    pin(P58) { direction : input; }
    pin(P59) { direction : input; }
    pin(P60) { direction : input; }
    pin(P61) { direction : input; }
    pin(P62) { direction : input; }
    pin(P63) { direction : input; }
    pin(Y) {
      direction: output;
      function : "(F' E' D' C' B' A' P0) | (F' E' D' C' B' A P1) | (F' E' D' C' B A' P2) | (F' E' D' C' B A P3) | (F' E' D' C B' A' P4) | (F' E' D' C B' A P5) | (F' E' D' C B A' P6) | (F' E' D' C B A P7) | (F' E' D C' B' A' P8) | (F' E' D C' B' A P9) | (F' E' D C' B A' P10) | (F' E' D C' B A P11) | (F' E' D C B' A' P12) | (F' E' D C B' A P13) | (F' E' D C B A' P14) | (F' E' D C B A P15) | (F' E D' C' B' A' P16) | (F' E D' C' B' A P17) | (F' E D' C' B A' P18) | (F' E D' C' B A P19) | (F' E D' C B' A' P20) | (F' E D' C B' A P21) | (F' E D' C B A' P22) | (F' E D' C B A P23) | (F' E D C' B' A' P24) | (F' E D C' B' A P25) | (F' E D C' B A' P26) | (F' E D C' B A P27) | (F' E D C B' A' P28) | (F' E D C B' A P29) | (F' E D C B A' P30) | (F' E D C B A P31) | (F E' D' C' B' A' P32) | (F E' D' C' B' A P33) | (F E' D' C' B A' P34) | (F E' D' C' B A P35) | (F E' D' C B' A' P36) | (F E' D' C B' A P37) | (F E' D' C B A' P38) | (F E' D' C B A P39) | (F E' D C' B' A' P40) | (F E' D C' B' A P41) | (F E' D C' B A' P42) | (F E' D C' B A P43) | (F E' D C B' A' P44) | (F E' D C B' A P45) | (F E' D C B A' P46) | (F E' D C B A P47) | (F E D' C' B' A' P48) | (F E D' C' B' A P49) | (F E D' C' B A' P50) | (F E D' C' B A P51) | (F E D' C B' A' P52) | (F E D' C B' A P53) | (F E D' C B A' P54) | (F E D' C B A P55) | (F E D C' B' A' P56) | (F E D C' B' A P57) | (F E D C' B A' P58) | (F E D C' B A P59) | (F E D C B' A' P60) | (F E D C B' A P61) | (F E D C B A' P62) | (F E D C B A P63)";
      timing() {
        related_pin : "A B C D E F";
        timing_sense : non_unate;
        cell_rise(scalar) {
            values("1000.0");
        }
        cell_fall(scalar) {
            values("1000.0");
        }
        rise_transition(scalar) {
            values("1000.0");
        }
        fall_transition(scalar) {
            values("1000.0");
        }
      }
    }
  }

}
